#!/usr/bin/env bash

set -eo pipefail

WEBROOT=/var/www/wordpress/html

#
# Download & extract wp files into web root
#

[ -d "$WEBROOT" ] || mkdir -p "$WEBROOT"
if [ -z "$(ls -A "$WEBROOT")" ]; then
  echo -n "Downloading Wordpress ${WORDPRESS_VERSION}"
  echo " (https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz)"
  curl -o wordpress.tar.gz -fSLs "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz"
  echo -n "Checksum for "
  echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c -
  tar --no-same-owner --strip-components=1 -C "$WEBROOT" -xzf wordpress.tar.gz wordpress
  rm wordpress.tar.gz
fi

#
# Download plugins given in $WORDPRESS_PLUGINS
#

cd "${WEBROOT}/wp-content/plugins"
PLUGINS="$(
  echo $WORDPRESS_PLUGINS | \
  sed \
    -e 's/\(\S\+\)\s\?\(\S\+\)\?\s*/\1.\2.zip\n/g' \
    -e 's/\.\./\./g' \
    -e '/^\s*$/d'
)"
for plugin_file in $PLUGINS; do
  plugin_url="https://downloads.wordpress.org/plugin/${plugin_file}"
  echo "Downloading plugin ${plugin_url}"
  curl -sS -O "$plugin_url"
  unzip -o "$plugin_file" > /dev/null
  rm "$plugin_file"
done

# ACF plugin is different - GitHub release
plugin_url="https://github.com/wp-premium/advanced-custom-fields-pro/archive/${ACF_PRO_VERSION}.zip"
echo "Downloading plugin ${plugin_url}"
curl -sS -O -L "$plugin_url"
unzip -o "${ACF_PRO_VERSION}.zip" > /dev/null
rm "${ACF_PRO_VERSION}.zip"
[ -d advanced-custom-fields-pro ] && rm -rf advanced-custom-fields-pro
mv -f "advanced-custom-fields-pro-${ACF_PRO_VERSION}" advanced-custom-fields-pro

# CUN plugin is different - GitHub branch
plugin_url=https://github.com/tsertkov/content-update-notifier/archive/master.zip
echo "Downloading plugin ${plugin_url}"
curl -sS -O -L "$plugin_url"
unzip -o master.zip > /dev/null
rm master.zip
[ -d content-update-notifier ] && rm -rf content-update-notifier
mv -f content-update-notifier-master content-update-notifier

#
# Copy custom theme
#

echo "Copying custom theme ${WP_DEFAULT_THEME}"
cp -rf "${APPROOT}/wp-headless/${WP_DEFAULT_THEME}" "${WEBROOT}/wp-content/themes"

#
# Prepare wp-config.php file
#

WP_CONFIG_PATH=$(dirname "$WEBROOT")/wp-config.php
echo "Generating ${WP_CONFIG_PATH}"
php "${APPROOT}/wp-headless/wp-config-tpl.php" > "$WP_CONFIG_PATH"

#
# Symlink uploads to dedicated RW docker volume mount
#

rm -rf /var/www/wordpress/html/wp-content/uploads
ln -sf /var/www/uploads /var/www/wordpress/html/wp-content/uploads
chmod 777 /var/www/uploads

#
# Symlink custom plugins and themes
#

ln -sf /var/www/plugins/* "${WEBROOT}/wp-content/plugins/"
ln -sf /var/www/themes/* "${WEBROOT}/wp-content/themes/"

#
# Create db and user if necessary
#

while ! mysqladmin ping -h"$DB_HOST" --silent; do
  echo Waiting for "$DB_HOST"
  sleep 1
done

mysql -h "$DB_HOST" -u root -p"${MYSQL_ROOT_PASSWORD}" <<EOF
CREATE DATABASE IF NOT EXISTS \`${DB_NAME}\`;
CREATE USER IF NOT EXISTS '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASSWORD}';
GRANT ALL PRIVILEGES ON \`${DB_NAME}\`.* TO '${DB_USER}'@'%';
EOF

#
# Prepare environment to wp-cli
#

cd /var/www/wordpress/html
WP="wp --allow-root"

#
# Install multisite wp
#

$WP core is-installed --network || \
  $WP core multisite-install \
    --url="https://${DOMAIN}" \
    --title="$WORDPRESS_TITLE" \
    --admin_email="$ADMIN_EMAIL" \
    --skip-config \
    --skip-email

#
# Enable/disable themes
#

$WP theme is-active twentyseventeen-child || \
  $WP theme enable twentyseventeen-child --network --activate

$WP theme list --field=name --enabled=network | grep -xq twentyseventeen && \
  $WP theme disable twentyseventeen --network

$WP theme is-installed twentyfifteen && $WP theme delete twentyfifteen
$WP theme is-installed twentysixteen && $WP theme delete twentysixteen

#
# Enable/disable plugins
#

PLUGINS="$(
  echo $WORDPRESS_PLUGINS \
    | sed -e 's/\(\S\+\)\s\S\+\s*/\1\n/g' \
    | sed -e '/^\s*$/d'
  echo advanced-custom-fields-pro
  echo content-update-notifier
)"

WP_ENABLED_PLUGINS=$($WP plugin list --field=name --enabled=network)
for plugin_name in $PLUGINS; do
  echo "$WP_ENABLED_PLUGINS" | grep -xq "$plugin_name" || \
    $WP plugin activate "$plugin_name" --network
done

$WP plugin is-installed hello && $WP plugin delete hello
$WP plugin is-installed akismet && $WP plugin delete akismet
