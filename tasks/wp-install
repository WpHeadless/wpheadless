#!/usr/bin/env bash

set -eo pipefail
source tasks/.args

export AUTH_KEY="$(openssl rand -hex 32)"
export SECURE_AUTH_KEY="$(openssl rand -hex 32)"
export LOGGED_IN_KEY="$(openssl rand -hex 32)"
export NONCE_KEY="$(openssl rand -hex 32)"
export AUTH_SALT="$(openssl rand -hex 32)"
export SECURE_AUTH_SALT="$(openssl rand -hex 32)"
export LOGGED_IN_SALT="$(openssl rand -hex 32)"
export NONCE_SALT="$(openssl rand -hex 32)"

WEBROOT=/var/wordpress/html
WP="wp --allow-root --path="${WEBROOT}""

#
# Download & extract wp files into web root
#

[ -d "$WEBROOT" ] || mkdir -p "$WEBROOT"
if [ -z "$(ls -A "$WEBROOT")" ]; then
  $WP core download --version="$WORDPRESS_VERSION" --skip-content
  mkdir "${WEBROOT}/wp-content"
fi

#
# Disable themes frontend
#

sed -i -e "s/^define( 'WP_USE_THEMES', true );/define( 'WP_USE_THEMES', false );/" "${WEBROOT}/index.php"

#
# Symlink themes to dedicated docker volume mount
#

ln -sf /var/www/themes "${WEBROOT}/wp-content/themes"

#
# Prepare wp-config.php file
#

WP_CONFIG_PATH=$(dirname "$WEBROOT")/wp-config.php
echo "Generating ${WP_CONFIG_PATH}"
php "${APPROOT}/wordpress/wp-config-tpl.php" > "$WP_CONFIG_PATH"

#
# Copy multisite-cron scheduler
#

cp "${APPROOT}/wordpress/wp-cron-multisite.php" "$WEBROOT"

#
# Symlink uploads to dedicated RW docker volume mount
#

ln -sf /var/www/uploads "${WEBROOT}/wp-content/uploads"
chmod 777 /var/www/uploads

#
# Symlink plugins to dedicated docker volume mount
#

ln -sf /var/www/plugins "${WEBROOT}/wp-content/plugins"

#
# Create db and user if necessary
#

while ! mysqladmin ping -h"$DB_HOST" --silent; do
  echo Waiting for "$DB_HOST"
  sleep 1
done

mysql -h "$DB_HOST" -u root -p"${MYSQL_ROOT_PASSWORD}" <<EOF
CREATE DATABASE IF NOT EXISTS \`${DB_NAME}\`;
CREATE USER IF NOT EXISTS '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASSWORD}';
GRANT ALL PRIVILEGES ON \`${DB_NAME}\`.* TO '${DB_USER}'@'%';
EOF

#
# Install multisite wp
#

if ! $WP core is-installed --network; then
  WP_CORE_OPTIONS=""

  # TODO find solution to pass quoted admin password argument via WP_CORE_OPTIONS
  # and remove this if condition keeping only else branch
  if [ ! -z "$ADMIN_PASSWORD" ]; then
    $WP core multisite-install \
      --url="https://${DOMAIN}" \
      --title="$WORDPRESS_TITLE" \
      --admin_email="$ADMIN_EMAIL" \
      --admin_password="$ADMIN_PASSWORD" \
      $WP_CORE_OPTIONS \
      ;
  else
    $WP core multisite-install \
      --url="https://${DOMAIN}" \
      --title="$WORDPRESS_TITLE" \
      --admin_email="$ADMIN_EMAIL" \
      $WP_CORE_OPTIONS \
      ;
  fi
fi

#
# Install & activate plugins
#

WP_ENABLED_PLUGINS=$($WP plugin list --field=name --status=active-network)

# Install ACF Pro from GitHub
if ! echo "$WP_ENABLED_PLUGINS" | grep -xq "advanced-custom-fields-pro"; then
  PLUGIN_URL="https://github.com/wp-premium/advanced-custom-fields-pro/archive/${ACF_PRO_VERSION}.zip"
  $WP plugin install "$PLUGIN_URL" --activate-network
fi

# Install CUN from GitHub
if ! echo "$WP_ENABLED_PLUGINS" | grep -xq "content-update-notifier"; then
  PLUGIN_URL="https://github.com/WpHeadless/content-update-notifier/archive/master.zip"
  $WP plugin install "$PLUGIN_URL" --activate-network
fi

# Install plugins from wordpress.org
for plugin_file in $WORDPRESS_PLUGINS; do
  PLUGIN_NAME="$(echo "$plugin_file" | cut -d = -f 1)"
  PLUGIN_VERSION="$(echo "$plugin_file" | cut -d = -f 2)"

  echo "$WP_ENABLED_PLUGINS" | grep -xq "$PLUGIN_NAME" || \
    $WP plugin install "$PLUGIN_NAME" --version="$PLUGIN_VERSION" --activate-network
done
